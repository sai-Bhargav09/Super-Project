name: Java Maven Example for GKE

on:
  push:
    branches:
      - main
  workflow_dispatch:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean package

#      - name: Log in to DockerHub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Log in to JFrog Artifactory
        run: echo ${{ secrets.JFROG_ACCESS_TOKEN}} | docker login ${{ secrets.DOCKER_REGISTRY }} -u ${{ secrets.JFROG_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_REGISTRY }}/addressbook:latest .

      - name: Push Docker image to Artifactory
        run: docker push ${{ secrets.DOCKER_REGISTRY }}/addressbook:latest

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          project_id: heroic-arbor-431706-b1
          workload_identity_provider:  //iam.googleapis.com/projects/402394263593/locations/global/workloadIdentityPools/oidc-git/providers/github-actions
#          credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Use gcloud CLI
        run: |
          gcloud info

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

#      - name: Check fro cluster existence
#        id: check-cluster
#        run: |
#          if gcloud container clusters describe poc-github-cluster --zone us-central1-a --project heroic-arbor-431706-b1 >/dev/null 2>&1; then
#          echo "Cluster already exists, skipping creation."
#          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --region ${{ secrets.GKE_REGION }}
#          kubectl get nodes
#          exit 0
#          else
#          echo "Cluster does not exist, creating now."
#          fi

      - name: Configure kubectl for GKE
#        if: ${{ !steps.check-cluster.outcome == 'success' }}
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --region ${{ secrets.GKE_REGION }}

#      - name: JFrog Xray scan
#        uses: jfrog/setup-jfrog-cli@v4
#        with:
#          version: latest
#
#      - name: Run Xray scan on Docker image
#        run: |
#          jfrog rt docker-scan ${{ secrets.DOCKER_REGISTRY }}/addressbook:latest --scan-type xray
#        env:
#          JFROG_URL: ${{ secrets.JFROG_URL }}
#          JFROG_USERNAME: ${{ secrets.JFROG_USERNAME }}
#          JFROG_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}

#      - name: Authenticate to GKE
#        run: |
#          echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" > ${HOME}/gcloud.json
#          gcloud auth activate-service-account --key-file=${HOME}/gcloud.json
#          gcloud config set project ${{ secrets.GKE_PROJECT_ID }}
#          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --region ${{ secrets.GKE_REGION }}

      # Step 12: Pull the Docker image from JFrog
      - name: Pull Docker image from JFrog
        run: |
          docker pull ${{ secrets.DOCKER_REGISTRY }}/addressbook:latest

      # Step 13: Deploy to GKE
      - name: Deploy to GKE
        run: |
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml

      # Optional: Verify deployment
      - name: Verify Deployment
        run: |
          kubectl get pods
          kubectl get services
